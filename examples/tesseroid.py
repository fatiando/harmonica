"""
Tesseroid Forward Modelling
===========================

Computing the gravitational fields generated by regional or global scale structures
require to take into account the curvature of the Earth.
One common approach is to use spherical prisms also known as tesseroids.
We will compute the gravitational potential and the radial component of the acceleration
generated by a single tesseroid on a computation grid through the
:func:`harmonica.tesseroid_gravity` function.
"""
import harmonica as hm
import verde as vd
import matplotlib.pyplot as plt
import cartopy.crs as ccrs


# Get default ellipsoid (WGS84) to obtain the mean Earth radius
ellipsoid = hm.get_ellipsoid()

# Define computation points as a regular grid at 1km above the mean Earth radius
region = [-10, 10, -10, 10]
spacing = 0.1
radius = 1e3 + ellipsoid.mean_radius
coordinates = vd.grid_coordinates(region, spacing=spacing, extra_coords=radius)

# Define tesseroid with top surface at the mean Earth radius, thickness of 10km and
# density of 2670kg/m^3
west, east, south, north = -5, 5, -5, 5
thickness = 10e3
top = ellipsoid.mean_radius
bottom = top - thickness
tesseroid = [west, east, south, north, bottom, top]
density = 2670

# Compute the potential and the radial component of the acceleration
fields = "potential g_r".split()
results = {}
for field in fields:
    results[field] = hm.tesseroid_gravity(coordinates, tesseroid, density, field=field)

# Plot the gravitational fields
fig = plt.figure(figsize=(8, 5))
units = {"potential": "J/kg", "g_r": "mGal"}
titles = {
    "potential": "Potential gravitational field",
    "g_r": "Radial component of gravitational gradient",
}
for i, field in enumerate(fields):
    # Add subplot
    ax = fig.add_subplot(1, len(fields), i + 1, projection=ccrs.PlateCarree())
    # Plot gravitational field and colorbar
    img = ax.pcolormesh(*coordinates[:2], results[field])
    plt.colorbar(
        img, ax=ax, pad=0.1, aspect=50, orientation="horizontal", label=units[field]
    )
    # Add grid lines
    grid_lines = ax.gridlines(
        ccrs.PlateCarree(),
        draw_labels=[True, True, False, False],
        linestyle="--",
        alpha=0.4,
    )
    grid_lines.xlabels_top = False
    grid_lines.ylabels_right = False
    ax.set_title(titles[field])
plt.show()
