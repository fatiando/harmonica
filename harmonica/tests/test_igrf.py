# Copyright (c) 2018 The Harmonica Developers.
# Distributed under the terms of the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause
#
# This code is part of the Fatiando a Terra project (https://www.fatiando.org)
#
""" Test the IGRF results against the ones calculated by the BGS.
"""
import datetime
import os

import numpy as np
import numpy.testing as npt
import pytest

from .._spherical_harmonics.igrf import (
    IGRF14,
    fetch_igrf14,
    interpolate_coefficients,
    load_igrf,
)

# IGRF14 values for the city of SÃ£o Paulo.
# Longitude: -43.7 degrees.
# Latitude: -23.5 degrees.
# Elevation: 700 m GPS.
# Columns are date, B_north, B_east, B_down in nT.
# Generated by https://www.ngdc.noaa.gov/geomag/calculators/magcalc.shtml
IGRF_SAO_PAULO = [
    ["1900-01-01", 24528.6, -3007.6, -6412.6],
    ["1904-01-01", 24412.4, -3285.4, -6544.9],
    ["1908-01-01", 24281.5, -3607.3, -6680.1],
    ["1912-01-01", 24132.9, -3950.9, -6826.7],
    ["1916-01-01", 23965.6, -4284.3, -6999.6],
    ["1920-01-01", 23780.3, -4566.4, -7219.3],
    ["1924-01-01", 23572.0, -4799.5, -7496.8],
    ["1928-01-01", 23368.2, -5004.7, -7754.8],
    ["1932-01-01", 23176.7, -5193.2, -8006.3],
    ["1936-01-01", 22991.1, -5363.0, -8258.9],
    ["1940-01-01", 22791.2, -5498.7, -8515.0],
    ["1944-01-01", 22532.6, -5620.0, -8774.1],
    ["1948-01-01", 22215.4, -5702.2, -9035.2],
    ["1952-01-01", 21911.7, -5801.1, -9316.3],
    ["1956-01-01", 21624.6, -5943.9, -9595.2],
    ["1960-01-01", 21287.6, -6129.4, -9809.2],
    ["1964-01-01", 20988.0, -6253.8, -10211.2],
    ["1968-01-01", 20662.8, -6380.4, -10532.5],
    ["1972-01-01", 20338.0, -6498.6, -10847.7],
    ["1976-01-01", 20017.9, -6608.5, -11193.5],
    ["1980-01-01", 19684.3, -6721.6, -11568.2],
    ["1984-01-01", 19318.5, -6785.2, -11978.3],
    ["1988-01-01", 18961.0, -6815.2, -12341.1],
    ["1992-01-01", 18622.3, -6816.6, -12688.4],
    ["1996-01-01", 18290.3, -6804.0, -13033.4],
    ["2000-01-01", 17920.6, -6805.0, -13345.2],
    ["2004-01-01", 17583.2, -6796.2, -13673.6],
    ["2008-01-01", 17238.8, -6795.2, -14022.9],
    ["2012-01-01", 16868.0, -6783.9, -14390.2],
    ["2016-01-01", 16474.6, -6750.7, -14779.5],
    ["2020-01-01", 16085.4, -6690.6, -15201.8],
    ["2024-01-01", 15700.2, -6573.2, -15568.5],
]
# IGRF14 values for the city of Ulaanbaatar.
# Longitude: 106.9 degrees.
# Latitude: 47.9 degrees.
# Elevation: 1300 m GPS.
# Columns are date, B_north, B_east, B_down in nT.
# Generated by https://www.ngdc.noaa.gov/geomag/calculators/magcalc.shtml
IGRF_ULAANBAATAR = [
    ["1900-06-01", 23457.9, -54.7, 53032.1],
    ["1906-06-01", 23348.9, -136.6, 53163.7],
    ["1912-05-31", 23177.0, -282.7, 53238.3],
    ["1918-06-01", 22980.7, -496.9, 53235.1],
    ["1924-05-31", 22829.4, -693.7, 53204.1],
    ["1930-06-01", 22748.3, -862.3, 53237.5],
    ["1936-05-31", 22739.2, -992.6, 53395.2],
    ["1942-06-01", 22806.2, -1090.6, 53838.0],
    ["1948-05-31", 22898.4, -1169.7, 54374.3],
    ["1954-06-01", 22972.4, -1276.8, 54656.6],
    ["1960-05-31", 23028.2, -1432.8, 54552.7],
    ["1966-06-01", 23107.2, -1438.3, 54421.4],
    ["1972-05-31", 23058.2, -1447.7, 54183.4],
    ["1978-06-01", 22986.4, -1454.4, 54075.0],
    ["1984-05-31", 22831.1, -1457.7, 54092.5],
    ["1990-06-01", 22660.1, -1406.2, 54209.6],
    ["1996-05-31", 22483.5, -1350.9, 54435.0],
    ["2002-06-01", 22368.6, -1442.9, 54507.3],
    ["2008-05-31", 22214.7, -1605.3, 54565.2],
    ["2014-06-01", 21932.5, -1721.0, 54756.3],
    ["2020-05-31", 21677.4, -1940.8, 55078.8],
    ["2026-06-01", 21568.1, -2104.8, 55327.5],
]
# IGRF14 values for the city of Addis Ababa.
# Longitude: 38.7 degrees.
# Latitude: 9.0 degrees.
# Elevation: 2355 m GPS.
# Columns are date, B_north, B_east, B_down in nT.
# Generated by https://www.ngdc.noaa.gov/geomag/calculators/magcalc.shtml
IGRF_ADDIS_ABABA = [
    ["1900-02-01", 34854.0, -2393.3, -1815.1],
    ["1905-08-02", 34817.7, -1981.9, -1751.5],
    ["1911-02-01", 34783.0, -1518.5, -1641.0],
    ["1916-08-02", 34764.6, -1071.6, -1417.8],
    ["1922-02-01", 34764.2, -728.3, -1171.1],
    ["1927-08-02", 34818.4, -504.4, -983.1],
    ["1933-02-01", 34948.0, -375.4, -882.2],
    ["1938-08-02", 35132.4, -326.7, -849.1],
    ["1944-02-01", 35126.6, -498.7, -782.9],
    ["1949-08-02", 35354.7, -428.4, -887.6],
    ["1955-02-01", 35631.6, -439.1, -814.4],
    ["1960-08-02", 35711.4, -321.1, -747.9],
    ["1966-02-01", 35729.3, -197.2, -738.9],
    ["1971-08-02", 35699.2, -65.5, -761.0],
    ["1977-02-01", 35607.9, 177.4, -687.2],
    ["1982-08-02", 35513.0, 428.6, -453.4],
    ["1988-02-01", 35418.8, 590.9, -190.4],
    ["1993-08-02", 35360.8, 706.6, 121.8],
    # For some reason, there is a 20 nT difference on this particular date
    # ["1999-02-01", 35342.8, 829.2, 458.9],
    ["2004-08-02", 35393.7, 980.7, 754.7],
    ["2010-02-01", 35471.2, 1181.1, 1068.0],
    ["2015-08-02", 35531.8, 1342.4, 1396.4],
    ["2021-02-01", 35605.6, 1421.6, 1788.7],
    ["2026-08-02", 35675.0, 1368.9, 2067.7],
]


def test_fetch_igrf14():
    "Check that the coefficient file can be fetched from Zenodo"
    fname = fetch_igrf14()
    assert os.path.exists(fname)


def test_load_igrf():
    "Check if things read have the right shapes and sizes and some values"
    years, coeffs = load_igrf(fetch_igrf14())
    assert years.size == 26
    npt.assert_allclose(years, np.arange(1900, 2026, 5))
    assert coeffs["g"].shape == (26, 14, 14)
    assert coeffs["h"].shape == (26, 14, 14)
    # Check that the 0,0 g is zero for all dates
    npt.assert_allclose(coeffs["g"][:, 0, 0], 0)
    # Check that all h for m=0 is zero for all dates
    npt.assert_allclose(coeffs["h"][:, :, 0], 0)
    # Check a few values against values copied from the file
    npt.assert_allclose(coeffs["g"][0, 1, 0], -31543)
    npt.assert_allclose(coeffs["g"][0, 1, 1], -2298)
    npt.assert_allclose(coeffs["g"][5, 5, 3], -28)
    npt.assert_allclose(coeffs["g"][24, 13, 13], -0.40)
    npt.assert_allclose(coeffs["h"][24, 13, 13], -0.60)
    npt.assert_allclose(coeffs["h"][12, 7, 1], -55)


def test_load_igrf_file_not_found():
    "Check if it fails when given a bad file name"
    with pytest.raises(IOError):
        load_igrf("a-file-that-doesnt-exist.txt")


def test_interpolate_coefficients():
    "Check that calculating on/close to epochs gives right coefficients"
    years, coeffs = load_igrf(fetch_igrf14())
    for i, year in enumerate(years):
        g_date, h_date = interpolate_coefficients(
            datetime.datetime(year, month=1, day=1, hour=0, minute=1, second=0),
            years,
            coeffs,
        )
        for n in range(coeffs["g"].shape[1]):
            for m in range(n):
                npt.assert_allclose(g_date[n, m], coeffs["g"][i, n, m], atol=0.001)
                npt.assert_allclose(h_date[n, m], coeffs["h"][i, n, m], atol=0.001)


@pytest.mark.parametrize(
    ("data", "coordinates"),
    [
        (IGRF_SAO_PAULO, (-43.7, -23.5, 700)),
        (IGRF_ULAANBAATAR, (106.9, 47.9, 1300)),
        (IGRF_ADDIS_ABABA, (38.7, 9.0, 2355)),
    ],
    ids=["Sao Paulo", "Ulaanbaatar", "Addis Ababa"],
)
def test_igrf_points(data, coordinates):
    "Check against NOAA calculations on individual points"
    for date, bn, be, bz in data:
        field = IGRF14(date).predict(coordinates)
        # A small variation is expected since their Fortran code handles dates
        # differently from our code.
        npt.assert_allclose(
            np.ravel(field),
            (be, bn, -bz),
            err_msg=f"date={date}",
            atol=0,
            rtol=0.005,  # 0.5% accuracy
        )
