"""
Gravity of ellipsoids models.
"""
import math
import numpy as np
from .ellipsoid import get_ellipsoid


def normal_gravity(latitude, height):
    """
    Calculate normal gravity at any latitude and height.

    Computes the magnitude of the gradient of the gravitational potential
    generated by a reference ellipsoid on a point at a certain ``latitude`` and
    ``height``.
    It makes use of the closed form expression of [LiGotze2001]_ and the
    current reference ellipsoid defined by :func:`~harmonica.set_ellipsoid`.

    Parameters
    ----------
    latitude : float or numpy array
        The latitude where the normal gravity will be computed (in degrees)
    height : float or numpy array
        The height of computation (in meters). Should be ellipsoidal
        (geometric) heights for geophysical purposes.

    Returns
    -------
    gamma : float or numpy array
        The computed normal gravity (in mGal).

    """
    ellipsoid = get_ellipsoid()
    E = ellipsoid.linear_eccentricity
    a = ellipsoid.semimajor_axis
    b = ellipsoid.semiminor_axis
    omega2 = ellipsoid.angular_velocity**2

    E2 = E**2
    bE = b / E
    atanEb = math.atan2(E, b)
    lat = np.deg2rad(latitude)
    coslat = np.cos(lat)
    sinlat = np.sin(lat)
    tanlat = sinlat / coslat
    beta = np.arctan2(b * tanlat, a)
    sinbeta = np.sin(beta)
    cosbeta = np.cos(beta)
    zl2 = (b * sinbeta + height * sinlat)**2
    rl2 = (a * cosbeta + height * coslat)**2
    D = (rl2 - zl2) / E2
    R = (rl2 + zl2) / E2
    cosbetal = np.sqrt(0.5 * (1 + R) - np.sqrt(0.25 * (1 + R**2) - 0.5 * D))
    cosbetal2 = cosbetal**2
    sinbetal2 = 1 - cosbetal2
    bl = np.sqrt(rl2 + zl2 - E2 * cosbetal2)
    bl2 = bl**2
    blE = bl / E
    atanEbl = np.arctan2(E, bl)
    q0 = 0.5 * ((1 + 3 * bE**2) * atanEb - 3 * bE)
    q0l = 3 * (1 + blE**2) * (1 - blE * atanEbl) - 1
    W = np.sqrt((bl2 + E2 * sinbetal2) / (bl2 + E2))
    a2 = a**2
    term1 = ellipsoid.geocentric_grav_const / (bl2 + E2)
    term2 = 0.5 * sinbetal2 - 1 / 6
    term2 *= a2 * E * q0l * omega2 / ((bl2 + E2) * q0)
    term3 = -cosbetal2 * bl * omega2
    gamma = (term1 + term2 + term3) / W
    # Convert gamma from SI to mGal
    gamma *= 1e-5
    return gamma
