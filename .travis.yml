# Configuration file for TravisCI

# We use miniconda for Python so don't need any Python specific tools
language: generic

# Use the container builds so we don't need sudo priviledges
sudo: false

# Only build pushes to the master branch and tags. This avoids the double
# builds than happen when working on a branch instead of a fork.
branches:
    only:
        - master
        # Regex to build tagged commits with version numbers
        - /\d+\.\d+(\.\d+)?(\S*)?$/

# Define environment variables common to all builds
env:
    global:
        # Encrypted variables
        # Github Token for pushing the built HTML (GH_TOKEN)
        - secure: "Xr1Zc6Zu/AyqvDaiSv7Omr6nX67Onfffk8wL5XseREh9IH3iTWcBtM5lU7JyM87czOX1s3tux1+c/2xX7CdP4W8e+EK5npKV53bbC96tl66up5JMP5mzGucatfTfRZ5bJc8MwXiAIUM3LX+8XU/tIAw56c1T0eiNmqdazBuRXsshFUMoIpIQqM7rnhOk3j//VICjZrXiz5MqNUOmVQmvGxdZyW/jgstemD4Vhw4Oh8/kr6cgXSBltFQIc07jVfywd/noNEC1X2V+R7teE+6PUKpINomPKYlLYN2+T21BdrfIkVnHEOZhnr3eft7190+naIuWB9W1V1EbVI9/2OGkFkMUvyZHBN6VaKLQbbrtzmJNt0cgQRqRXWj+XlYtJfGDxGTc020w5oafU7SxXPkcFj1x1304S59pOoVuRemaVT9zwl/Q0mbYH04WxufC6arJCnegT14OUdumw0dXaZ3Zadrb7z8OhI+Pc2AqE3LAgKrcGq2fqjEGzLVRibYwX3vbkIHgVK1RORI6+oInEXLdOc7imH/13HV0wG0VJ6gNkDtdMmmPouDb7fEby6om7yjyQ1rSqTlZT6wv40KRiXyqHA9Lx8BxK1LHB13+sZWigcnrNni834vgzeS5agoFdeOOGBB/8n7f/z98eKu3Bfk3XQLXZjW2FTeTzxovzvhNzA4="
        # PyPI password for deploying releases (TWINE_PASSWORD)
        - secure: "ufJKNS+JGD3klJglfML+4gerCOntHlfLX8M1zb3wyf6QbOfqZncvijh5ChVSAsqMeqKJG+hHVUgRN0pPgOyhsCetgeS/QdYsehEZO+UZeni+xdaAZgG/pz0pzxDuIOOTu9CImKIn+hnMSo3cnoO9fASem1c77XvLHs6BcShYpUZTRElvDGcvWlU2aZMA2qO9rVBpRBgr8GK6uLdXqV6yzJznWlQVRSJmpVEVfdNr5cbtgy7gxf2IBL2TXEWzzqwcJc3/bkzGFCwqgJ3aouIeHeWuNJEW23BjfIj6Da7ibsC7cPwS0u96MbBTBNOVInlh6Zy7xQvJpzgYBPTE3P3+HMUF7wS6HVkGyn86kh0JMfTwUjSul9SxGDCSn1JWnH5Ya7S5rGekYPcxE+2gKAt3BHjPM8xIDo6fIPH8zWLXl7xQJDHe/TWc3GRUD2OB+y9fWy+xvuXz7DI41oSHMSAEw6Ob2x7dGPbiSGvWmK0Z6Nm1sBVP/3xGhfhuH48587cbVEU27MAIUCzyJYi2750z3LP5pDP4HGiJsiH/kZLTBTgjxKM0m6+A/quAlARUsiXyf5z9fAqed13EcB/0x8YqqGVHNC79+7eIhEWwPU1h1+NeiTqK2wznzvawdfDtFHtquLC0pqWNq+r76walp+wBG0+jGpK+D/orUoW/x0oVrGo="
        - TWINE_USERNAME=Leonardo.Uieda
        # The files with the listed requirements to be installed by conda
        - CONDA_REQUIREMENTS=requirements.txt
        - CONDA_REQUIREMENTS_DEV=requirements-dev.txt
        # These variables control which actions are performed in a build
        - TEST=false
        - CHECK=false
        - BUILD_DOCS=false
        - DEPLOY_DOCS=false
        - DEPLOY_PYPI=false

# Specify the build configurations. Be sure to only deploy from a single build.
matrix:
    include:
        # Code style and quality checks
        - name: "Style checks"
          os: linux
          env:
              - PYTHON=3.7
              - CHECK=true
              # Don't need to install everything just to run the style checks
              - CONDA_INSTALL_EXTRA="black flake8 pylint=2.2.2"
              - CONDA_REQUIREMENTS=""
              - CONDA_REQUIREMENTS_DEV=""
        - name: "Linux - Python 3.7"
          os: linux
          env:
              - PYTHON=3.7
              - TEST=true
              - BUILD_DOCS=true
        # Main build to deploy to PyPI and Github pages
        - name: "Linux - Python 3.6 (deploy)"
          os: linux
          env:
              - PYTHON=3.6
              - TEST=true
              - BUILD_DOCS=true
              - DEPLOY_DOCS=true
              - DEPLOY_PYPI=true
        - name: "Linux - Python 3.5"
          os: linux
          env:
              - PYTHON=3.5
              - TEST=true
              - BUILD_DOCS=true
        - name: "Mac - Python 3.7"
          os: osx
          env:
              - PYTHON=3.7
              - TEST=true
              - BUILD_DOCS=true
        - name: "Mac - Python 3.6"
          os: osx
          env:
              - PYTHON=3.6
              - TEST=true
              - BUILD_DOCS=true

# Setup the build environment
before_install:
    # Copy sample data to the verde data dir to avoid downloading all the time
    - mkdir -p $HOME/.harmonica/data/master
    - cp -r data/* $HOME/.harmonica/data/master
    # Get the Fatiando CI scripts
    - git clone --branch=1.0.0 --depth=1 https://github.com/fatiando/continuous-integration.git
    # Download and install miniconda and setup dependencies
    # Need to source the script to set the PATH variable globaly
    - source continuous-integration/travis/setup-miniconda.sh
    # Show installed pkg information for postmortem diagnostic
    - conda list

# Install the package that we want to test
install:
    # Make a binary wheel for our package and install it
    - python setup.py bdist_wheel
    - pip install dist/*

# Run the actual tests and checks
script:
    # Check code for style and quality
    - if [ "$CHECK" == "true" ]; then
          make check;
          make lint;
      fi
    # Run the test suite
    - if [ "$TEST" == "true" ]; then
          pip install codecov;
          make test;
      fi
    # Build the documentation
    - if [ "$BUILD_DOCS" == "true" ]; then
          make -C doc clean all;
      fi

# Things to do if the build is successful
after_success:
    # Upload coverage information
    - if [ "$TEST" == "true" ]; then
        coverage xml;
        echo "Uploading coverage to Codecov";
        codecov -e PYTHON;
      fi

# Deploy
deploy:
    # Make a release on PyPI
    - provider: script
      script: continuous-integration/travis/deploy-pypi.sh
      on:
          tags: true
          condition: '$DEPLOY_PYPI == "true"'
    # Push the built HTML in doc/_build/html to the gh-pages branch
    - provider: script
      script: continuous-integration/travis/deploy-gh-pages.sh
      skip_cleanup: true
      on:
          branch: master
          condition: '$DEPLOY_DOCS == "true"'
    # Push HTML when building tags as well
    - provider: script
      script: continuous-integration/travis/deploy-gh-pages.sh
      skip_cleanup: true
      on:
          tags: true
          condition: '$DEPLOY_DOCS == "true"'

# Don't send out emails every time a build fails
notifications:
    email: false
